// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\usecase\interface\user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "taskmanagementapi/pkg/utils/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// UserSignIn mocks base method.
func (m *MockUserUseCase) UserSignIn(arg0 models.UserSignIn) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignIn", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignIn indicates an expected call of UserSignIn.
func (mr *MockUserUseCaseMockRecorder) UserSignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignIn", reflect.TypeOf((*MockUserUseCase)(nil).UserSignIn), arg0)
}

// UserSignUp mocks base method.
func (m *MockUserUseCase) UserSignUp(arg0 models.UserSignup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserUseCaseMockRecorder) UserSignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UserSignUp), arg0)
}
