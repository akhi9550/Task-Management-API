// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\repository\interface\user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "taskmanagementapi/pkg/utils/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckUserExistsByEmail mocks base method.
func (m *MockUserRepository) CheckUserExistsByEmail(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByEmail indicates an expected call of CheckUserExistsByEmail.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByEmail), arg0)
}

// FindUserDetailsByEmail mocks base method.
func (m *MockUserRepository) FindUserDetailsByEmail(arg0 string) (models.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailsByEmail", arg0)
	ret0, _ := ret[0].(models.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailsByEmail indicates an expected call of FindUserDetailsByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserDetailsByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailsByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserDetailsByEmail), arg0)
}

// GenerateJwtToken mocks base method.
func (m *MockUserRepository) GenerateJwtToken(user models.UserDetails) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJwtToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJwtToken indicates an expected call of GenerateJwtToken.
func (mr *MockUserRepositoryMockRecorder) GenerateJwtToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJwtToken", reflect.TypeOf((*MockUserRepository)(nil).GenerateJwtToken), user)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(arg0 models.UserSignup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), arg0)
}
