// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\repository\interface\task.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "taskmanagementapi/pkg/utils/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CheckTaskIDExist mocks base method.
func (m *MockTaskRepository) CheckTaskIDExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskIDExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskIDExist indicates an expected call of CheckTaskIDExist.
func (mr *MockTaskRepositoryMockRecorder) CheckTaskIDExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskIDExist", reflect.TypeOf((*MockTaskRepository)(nil).CheckTaskIDExist), arg0)
}

// CheckUserIDExist mocks base method.
func (m *MockTaskRepository) CheckUserIDExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIDExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIDExist indicates an expected call of CheckUserIDExist.
func (mr *MockTaskRepositoryMockRecorder) CheckUserIDExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIDExist", reflect.TypeOf((*MockTaskRepository)(nil).CheckUserIDExist), arg0)
}

// DeleteTask mocks base method.
func (m *MockTaskRepository) DeleteTask(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTask), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockTaskRepository) GetTask(arg0, arg1 string) (models.TaskDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(models.TaskDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskRepositoryMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskRepository)(nil).GetTask), arg0, arg1)
}

// GetTasks mocks base method.
func (m *MockTaskRepository) GetTasks(arg0 string) ([]models.TaskDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", arg0)
	ret0, _ := ret[0].([]models.TaskDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskRepositoryMockRecorder) GetTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetTasks), arg0)
}

// InsertTask mocks base method.
func (m *MockTaskRepository) InsertTask(arg0 models.CreateTask, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTask indicates an expected call of InsertTask.
func (mr *MockTaskRepositoryMockRecorder) InsertTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockTaskRepository)(nil).InsertTask), arg0, arg1)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(arg0, arg1 string, arg2 models.CreateTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), arg0, arg1, arg2)
}
